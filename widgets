import sys
from PyQt5.QtWidgets import *
from PyQt5 import QtCore, QtWidgets, QtGui
from PyQt5.QAxContainer import *
from PyQt5.QtCore import *
from PyQt5 import uic
import win32com.client
import ctypes
import time
import pandas as pd
import os
# from PyQt5 import uic

g_objCodeMgr = win32com.client.Dispatch('CpUtil.CpCodeMgr')
g_objCpStatus = win32com.client.Dispatch('CpUtil.CpCybos')
g_objCpTrade = win32com.client.Dispatch('CpTrade.CpTdUtil')

gExcelFile = '8092.xlsx'

# form_class = uic.loadUiType("untitled.ui")[0]

def InitPlusCheck():
    # 프로세스가 관리자 권한으로 실행 여부
    if ctypes.windll.shell32.IsUserAnAdmin():
        print('정상: 관리자권한으로 실행된 프로세스입니다.')
    else:
        print('오류: 일반권한으로 실행됨. 관리자 권한으로 실행해 주세요')
        return False

    # 연결 여부 체크
    if (g_objCpStatus.IsConnect == 0):
        print("PLUS가 정상적으로 연결되지 않음. ")
        return False

    '''
    # 주문 관련 초기화
    if (g_objCpTrade.TradeInit(0) != 0):
        print("주문 초기화 실패")
        return False
    '''
    return True

wordGet = {'출시', '변동', '공급', '상승', '소식', '특징', '신규', '매도', '매수', '회복'}

# CpEvent: 실시간 이벤트 수신 클래스
class CpEvent:
    def set_params(self, client, name, caller):
        self.client = client  # CP 실시간 통신 object
        self.name = name  # 서비스가 다른 이벤트를 구분하기 위한 이름
        self.caller = caller  # callback 을 위해 보관
        self.diccode = {
            1: '종목뉴스',
            2: '공시정보',
            # 10: '외국계증권사창구첫매수',
            # 11: '외국계증권사창구첫매도',
            # 12: '외국인순매수',
            # 13: '외국인순매도',
            # 21: '전일거래량갱신',
            22: '최근5일거래량최고갱신',
            23: '최근5일매물대돌파',
            24: '최근60일매물대돌파',
            # 28: '최근5일첫상한가',
            # 29: '최근5일신고가갱신',
            # 30: '최근5일신저가갱신',
            # 31: '상한가직전',
            # 32: '하한가직전',
            # 41: '주가 5MA 상향돌파',
            # 42: '주가 5MA 하향돌파',
            # 43: '거래량 5MA 상향돌파',
            # 44: '주가데드크로스(5MA < 20MA)',
            # 45: '주가골든크로스(5MA > 20MA)',
            # 46: 'MACD 매수-Signal(9) 상향돌파',
            # 47: 'MACD 매도-Signal(9) 하향돌파',
            # 48: 'CCI 매수-기준선(-100) 상향돌파',
            # 49: 'CCI 매도-기준선(100) 하향돌파',
            # 50: 'Stochastic(10,5,5)매수- 기준선상향돌파',
            # 51: 'Stochastic(10,5,5)매도- 기준선하향돌파',
            # 52: 'Stochastic(10,5,5)매수- %K%D 교차',
            # 53: 'Stochastic(10,5,5)매도- %K%D 교차',
            # 54: 'Sonar 매수-Signal(9) 상향돌파',
            # 55: 'Sonar 매도-Signal(9) 하향돌파',
            # 56: 'Momentum 매수-기준선(100) 상향돌파',
            # 57: 'Momentum 매도-기준선(100) 하향돌파',
            58: 'RSI(14) 매수-Signal(9) 상향돌파',
            # 59: 'RSI(14) 매도-Signal(9) 하향돌파',
            # 60: 'Volume Oscillator 매수-Signal(9) 상향돌파',
            # 61: 'Volume Oscillator 매도-Signal(9) 하향돌파',
            # 62: 'Price roc 매수-Signal(9) 상향돌파',
            # 63: 'Price roc 매도-Signal(9) 하향돌파',
            # 64: '일목균형표매수-전환선 > 기준선상향교차',
            # 65: '일목균형표매도-전환선 < 기준선하향교차',
            # 66: '일목균형표매수-주가가선행스팬상향돌파',
            # 67: '일목균형표매도-주가가선행스팬하향돌파',
            68: '삼선전환도-양전환',
            # 69: '삼선전환도-음전환',
            70: '캔들패턴-상승반전형',
            # 71: '캔들패턴-하락반전형',
            81: '단기급락후 5MA 상향돌파',
            # 82: '주가이동평균밀집-5%이내',
            # 83: '눌림목재상승-20MA 지지'
        }

    def OnReceived(self):
        # print(self.name)

        if self.name == 'marketwatch':
            code = self.client.GetHeaderValue(0)
            name = g_objCodeMgr.CodeToName(code)
            cnt = self.client.GetHeaderValue(2)

            # [특징주 포착] CpSysDib.CpMarketWatchS
            # 특정주식종목이나 주식전종목에대한 특징주 포착 데이터
            # 실시간 처리 - marketwatch : 특이 신호(차트, 외국인 순매수 등)

            #GetHeaderValue
            # 0 - (string) 종목코드
            # 1 - (string) 종목명
            # 2 - (long) Count

            #GetDataValue
            # 0 (int) 시간(ushort)
            # 1 (char)작업구분
            #  'n'신규
            #  'c'취소
            #  2 (int) 특이사항코드 = diccode

            for i in range(cnt):
                item = {}
                newcancel = ''
                time = self.client.GetDataValue(0, i)
                h, m = divmod(time, 100)
                item['시간'] = '%02d:%02d' % (h, m)
                update = self.client.GetDataValue(1, i)
                cate = self.client.GetDataValue(2, i)
                if (update == ord('c')):
                    newcancel = '[취소]'
                if cate in self.diccode:
                    item['내용'] = newcancel + self.diccode[cate]
                else:
                    item['내용'] = newcancel + ''
                item['코드'] = code
                item['종목명'] = name
                item['구분'] = '특징주 포착데이터'
                print(self.name, item)
                self.caller.listWatchData.insert(0, item)
                # self.caller.insertDataToTable(item)

        elif self.name == 'marketnews':

            # 실시간 처리 - marketnews : 뉴스 및 공시 정보
            # CpMarketWatch
            # GetHeaderValue
            # 0 - (char) 내용구분
            #  'A'신규
            #  'D'삭제
            # 1 - (string) 종목코드
            # 2 - (short) 시간
            # 3 - (string) 종목명
            # 4 - (short) 항목구분
            #  1 종목뉴스 / 2 공시정보 / 10 외국계증권사순매수 / 11 외국계증권사순매도 / 12 외국인순매수 / 13 외국인순매도
            # 5 - (string) 내용

            item = {}
            update = self.client.GetHeaderValue(0)
            cont = ''
            if update == ord('D'):
                cont = '[삭제]'
            code = item['코드'] = self.client.GetHeaderValue(1)
            time = self.client.GetHeaderValue(2)
            h, m = divmod(time, 100)
            item['시간'] = '%02d:%02d' % (h, m)
            item['종목명'] = name = g_objCodeMgr.CodeToName(code) #self.client.GetHeaderValue(3)
            cate = self.client.GetHeaderValue(4)
            if cate in self.diccode:
                item['구분'] = self.diccode[cate]
            else:
                item['구분'] = ''
            item['내용'] = cont + self.client.GetHeaderValue(5)
            # print(self.name, item)
            # self.caller.listWatchData.insert(0, item)
            wordFound = False
            for word in wordGet:
                if word in self.client.GetHeaderValue(5):
                    print('CONTAINS:', self.name, item)
                    wordFound = True
                    break
            self.caller.insertDataToTable(item, wordFound)

class CpPublish:
    def __init__(self, name, serviceID):
        self.name = name
        self.obj = win32com.client.Dispatch(serviceID)
        self.bIsSB = False

    def Subscribe(self, var, caller):
        if self.bIsSB:
            self.Unsubscribe()

        if (len(var) > 0):
            self.obj.SetInputValue(0, var)

        handler = win32com.client.WithEvents(self.obj, CpEvent)
        handler.set_params(self.obj, self.name, caller)
        self.obj.Subscribe()
        self.bIsSB = True

    def Unsubscribe(self):
        if self.bIsSB:
            self.obj.Unsubscribe()
        self.bIsSB = False


# CpPBMarkeWatch:
class CpPBMarkeWatch(CpPublish):
    def __init__(self):
        super().__init__('marketwatch', 'CpSysDib.CpMarketWatchS')


# CpPB8092news:
class CpPB8092news(CpPublish):
    def __init__(self):
        super().__init__('marketnews', 'Dscbo1.CpSvr8092S')


# CpRpMarketWatch : 특징주 포착 통신
class CpRpMarketWatch:
    def __init__(self):
        self.objStockMst = win32com.client.Dispatch('CpSysDib.CpMarketWatch')
        self.objpbMarket = CpPBMarkeWatch()
        self.objpbNews = CpPB8092news()
        return

    def Request(self, code, caller):
        self.objpbMarket.Unsubscribe()
        self.objpbNews.Unsubscribe()

        # GetHeaderValue
        # 0 - 수신항목구분목록(string)
        # 1 - 시작시간(short)
        # 2 - 수신개수(short)
        # 대상: 전종목
        self.objStockMst.SetInputValue(0, code)
        # 수신할 항목: 1: 종목 뉴스 2: 공시정보 10: 외국계 창구첫매수, 11:첫매도 12 외국인 순매수 13 순매도
        rqField = '1,2' #,10,11,12,13'
        self.objStockMst.SetInputValue(1, rqField)
        # 시작시간(ushort): 요청시작시간. Default(0) - 처음부터
        self.objStockMst.SetInputValue(2, 0)

        ret = self.objStockMst.BlockRequest()
        print('BlockRequest', ret)
        if self.objStockMst.GetDibStatus() != 0:
            print('통신상태', self.objStockMst.GetDibStatus(), self.objStockMst.GetDibMsg1())
            return False

        #GetHeaderValue
        #0 - 수신항목구분목록(string)
        #1 - 시작시간(short)
        #2 - 수신개수(short)
        cnt = self.objStockMst.GetHeaderValue(2)
        for i in range(cnt):
            item = {}
            #GetDataValue
            #0 - 시간(ushort)
            #1 - 종목코드(string)
            #2 - 종목명(string)
            #3 - 항목구분(ushort)
            #4 - 내용(string)
            time = self.objStockMst.GetDataValue(0, i)
            h, m = divmod(time, 100)
            item['시간'] = '%02d:%02d' % (h, m)
            item['코드'] = self.objStockMst.GetDataValue(1, i)
            item['종목명'] = self.objStockMst.GetDataValue(2, i) #g_objCodeMgr.CodeToName(item['코드'])
            item['구분'] = self.objStockMst.GetDataValue(3, i)
            item['내용'] = self.objStockMst.GetDataValue(4, i)
            print(item)
            caller.listWatchData.append(item)
            wordFound = False
            for word in wordGet:
                if word in self.objStockMst.GetDataValue(4, i):
                    print('CONTAINS:', item)
                    wordFound = True
                    break
            caller.insertDataToTable(item, wordFound)

        self.objpbMarket.Subscribe(code, caller)
        self.objpbNews.Subscribe(code, caller)

        return True

class AlignDelegate(QtWidgets.QStyledItemDelegate):
    def initStyleOption(self, option, index):
        super(AlignDelegate, self).initStyleOption(option, index)
        option.displayAlignment = QtCore.Qt.AlignCenter

class OptionWindow(QDialog):
    def __init__(self, parent): #부모 window 설정
        super(OptionWindow, self).__init__(parent)
        option_ui = 'untitled.ui'
        uic.loadUi(option_ui, self)
        self.show()

class MainWindow(QMainWindow): #, form_class):
    def __init__(self):
        super().__init__()
        # Dashin plus check
        self.account_num = None
        if InitPlusCheck() == False:
            self.error_popup("CYBOS PLUS에 먼저 로그인 후 다시 접속 하세요.", "대신증권")
            exit()
        # # kiwoom API Module
        # self.kiwoom = QAxWidget("KHOPENAPI.KHOpenAPICtrl.1")
        # self.kiwoom.OnEventConnect.connect(self.login_event_connect)
        # self.kiwoom.dynamicCall("CommConnect()")
        # self.login_loop = QEventLoop()
        # self.login_loop.exec()
        # # kiwoom login event
        #
        # self.kiwoom.dynamicCall("KOA_Functions(QString, QString)", "ShowAccountWindow", "")

        ###### UI Setting ######
        self.setupUI()
        ########################
        # self.get_account_no()

    def clicked_option(self):   # 버튼 클릭 이벤트
        OptionWindow(self)	    #OptionWindows 클래스 self로 부모 윈도우에 대한 정보를 넘겨줌

    # kiwoom login event
    def login_event_connect(self, err_code):
        try:
            self.login_loop.exit()
            # if err_code == 0:
            #     self.kiwoom_status.clear()
            #     self.kiwoom_status.append("로그인 성공")
            #     self.kiwoom_status.setStyleSheet('color:rgb(%s,%s,%s)'%(100,100,255))
            #     self.btn_kiwoon_login.setEnabled(False)
            #     self.get_account_no()
        except:
            pass

    # kiwoom get account no
    def get_account_no(self):
        self.kiwoom_status.clear()
        self.kiwoom_status.append("로그인 성공")
        self.kiwoom_status.setStyleSheet('color:rgb(%s,%s,%s)' % (100, 100, 255))
        self.btn_kiwoon_login.setEnabled(False)
        self.account_num = self.kiwoom.dynamicCall("GetLoginInfo(QString)", ["ACCNO"])
        self.kiwoom_status.append("계좌번호: " + self.account_num.rstrip(';'))

    def setupUI(self):
        # Main Window
        self.setWindowTitle("뉴스")
        self.setGeometry(200, 100, 1330, 800)

        # Init GridLayout
        widget = QWidget(self)
        grid = QGridLayout(widget)
        grid.addWidget(self.createFirstExclusiveGroup(), 0, 0, 1, 1)
        grid.addWidget(self.createNonExclusiveGroup(), 0, 1, 1, 3)
        grid.addWidget(self.createSecondExclusiveGroup(), 1, 0, 1, 1)
        grid.addWidget(self.createPushButtonGroup(), 1, 1, 1, 3)
        self.setCentralWidget(widget)

        self.listWatchData = []
        self.objMarketWatch = CpRpMarketWatch()

        # self.tableWidget = QTableWidget(self)
        #
        # self.tableWidget.setGeometry(300, 30, 1000, 500)
        # # self.tableWidget.resize(800, 500)
        # self.tableWidget.setColumnCount(6)
        # # self.tableWidget.setRowCount(20)
        # self.tableWidget.setEditTriggers(QAbstractItemView.NoEditTriggers)
        # self.setTableWidgetData()
        #
        # delegate = AlignDelegate(self.tableWidget)
        # self.tableWidget.setItemDelegateForColumn(0, delegate)
        # self.tableWidget.setItemDelegateForColumn(1, delegate)
        # self.tableWidget.setItemDelegateForColumn(2, delegate)
        # self.tableWidget.setItemDelegateForColumn(3, delegate)
        # self.tableWidget.setItemDelegateForColumn(4, delegate)
        # self.tableWidget.setItemDelegateForColumn(5, delegate)
        # self.tableWidget.setColumnWidth(0, 70)
        # self.tableWidget.setColumnWidth(1, 70)
        # self.tableWidget.setColumnWidth(2, 150)
        # self.tableWidget.setColumnWidth(3, 500)
        # self.tableWidget.setColumnWidth(4, 80)
        # self.tableWidget.setColumnWidth(5, 80)
        # #for all
        # #self.tableWidget.setItemDelegate(delegate)
        #
        # nH = 20
        #
        # # kiwoom login btn
        # self.btn_kiwoon_login = QPushButton('로그인', self)
        # self.btn_kiwoon_login.move(20, nH)
        # self.btn_kiwoon_login.clicked.connect(self.btnKiwoomLogin_clicked)
        # nH += 30
        #
        # self.kiwoom_status = QTextEdit(self)
        # self.kiwoom_status.setGeometry(30, nH, 200, 100)
        # self.kiwoom_status.setEnabled(False)
        # self.kiwoom_status.append("로그인 안됨")
        # self.kiwoom_status.setStyleSheet('color:rgb(%s,%s,%s)' % (255, 100, 100))
        #
        # nH += 50
        # # kiwoom login self check
        # btnPrint = QPushButton('키움 체크', self)
        # btnPrint.move(20, nH)
        # btnPrint.clicked.connect(self.btnKiwoomCheck_clicked)
        # nH += 50
        #
        # btnExit = QPushButton('종료', self)
        # btnExit.move(20, nH)
        # btnExit.clicked.connect(self.btnExit_clicked)
        # nH += 50
        #
        # self.objMarketWatch.Request('*', self)

    def createFirstExclusiveGroup(self):
        groupbox = QGroupBox('Exclusive Radio Buttons')

        radio1 = QRadioButton('Radio1')
        radio2 = QRadioButton('Radio2')
        radio3 = QRadioButton('Radio3')
        radio1.setChecked(True)

        vbox = QVBoxLayout()
        vbox.addWidget(radio1)
        vbox.addWidget(radio2)
        vbox.addWidget(radio3)
        groupbox.setLayout(vbox)

        return groupbox

    def createSecondExclusiveGroup(self):
        groupbox = QGroupBox('Exclusive Radio Buttons')
        groupbox.setCheckable(True)
        groupbox.setChecked(False)

        radio1 = QRadioButton('Radio1')
        radio2 = QRadioButton('Radio2')
        radio3 = QRadioButton('Radio3')
        radio1.setChecked(True)
        checkbox = QCheckBox('Independent Checkbox')
        checkbox.setChecked(True)

        vbox = QVBoxLayout()
        vbox.addWidget(radio1)
        vbox.addWidget(radio2)
        vbox.addWidget(radio3)
        vbox.addWidget(checkbox)
        vbox.addStretch(1)
        groupbox.setLayout(vbox)

        return groupbox

    def createNonExclusiveGroup(self):
        groupbox = QGroupBox('Non-Exclusive Checkboxes')
        # groupbox.setFlat(True)

        checkbox1 = QCheckBox('Checkbox1')
        checkbox2 = QCheckBox('Checkbox2')
        checkbox2.setChecked(True)
        tristatebox = QCheckBox('Tri-state Button')
        tristatebox.setTristate(True)

        vbox = QVBoxLayout()
        vbox.addWidget(checkbox1)
        vbox.addWidget(checkbox2)
        vbox.addWidget(tristatebox)
        vbox.addStretch(1)
        groupbox.setLayout(vbox)

        return groupbox

    def createPushButtonGroup(self):
        groupbox = QGroupBox('Push Buttons')
        groupbox.setCheckable(True)
        groupbox.setChecked(True)

        pushbutton = QPushButton('Normal Button')
        togglebutton = QPushButton('Toggle Button')
        togglebutton.setCheckable(True)
        togglebutton.setChecked(True)
        flatbutton = QPushButton('Flat Button')
        flatbutton.setFlat(True)
        popupbutton = QPushButton('Popup Button')
        menu = QMenu(self)
        menu.addAction('First Item')
        menu.addAction('Second Item')
        menu.addAction('Third Item')
        menu.addAction('Fourth Item')
        popupbutton.setMenu(menu)

        vbox = QVBoxLayout()
        vbox.addWidget(pushbutton)
        vbox.addWidget(togglebutton)
        vbox.addWidget(flatbutton)
        vbox.addWidget(popupbutton)
        vbox.addStretch(1)
        groupbox.setLayout(vbox)

        return groupbox

    def setTableWidgetData(self):
        column_headers = ['뉴스시간', '종목코드', '종목명', '내용', '구분', '기타']
        self.tableWidget.setHorizontalHeaderLabels(column_headers)
        self.tableWidget.verticalHeader().setVisible(False)

        #     self.tableWidget.resizeColumnsToContents()
        #     self.tableWidget.resizeRowsToContents()

    def stock_buy(self, codename, stock_code, quantity):
        # 1초에 최대 5번까지만 가능
        # LONG SendOrder(
        #      BSTR sRQName, BSTR sScreenNo, BSTR sAccNo, LONG nOrderType,
        #      BSTR sCode, LONG nQty, LONG nPrice, BSTR sHogaGb, BSTR sOrgOrderNo)
        # sRQName - 사용자가 임의로 지정할 수 있는 이름입니다. (예: "삼성전자주문")
        # sScreenNo - 화면번호[4] 화면번호로 "0"을 제외한 4자리의 문자열을 사용합니다. (예: "1000")
        # sAccNo - 계좌번호[10] 계좌번호입니다. (예: "8140977311")
        # nOrderType - 주문유형(1: 신규매수, 2: 신규매도, 3: 매수취소, 4: 매도취소, 5: 매수정정, 6: 매도정정)
        # sCode, - 주식종목코드 - 매매할 주식의 종목코드입니다.
        # nQty – 주문수량
        # nPrice – 주문단가
        # sHogaGb - 거래구분
        # sOrgOrderNo – 원주문번호로 주문 정정시 사용합니다.
        # 비고
        # sHogaGb – 00:지정가, 03:시장가, 05:조건부지정가, 06:최유리지정가, 07:최우선지정가, 10:지정가IOC, 13:시장가IOC, 16:최유리IOC, 20:지정가FOK, 23:시장가FOK, 26:최유리FOK, 61:장전시간외종가, 62:시간외단일가, 81:장후시간외종가
        # ※ 시장가, 최유리지정가, 최우선지정가, 시장가IOC, 최유리IOC, 시장가FOK, 최유리FOK, 장전시간외, 장후시간외 주문시 주문가격을 입력하지 않습니다.
        # ex) 지정가 매수 - openApi.SendOrder(“RQ_1”, “0101”, “5015123410”, 1, “000660”, 10, 48500, “00”, “”);
        # 시장가 매수 - openApi.SendOrder(“RQ_1”, “0101”, “5015123410”, 1, “000660”, 10, 0, “03”, “”);
        # 매수 정정 - openApi.SendOrder(“RQ_1”,“0101”, “5015123410”, 5, “000660”, 10, 49500, “00”, “1”);
        # 매수 취소 - openApi.SendOrder(“RQ_1”, “0101”, “5015123410”, 3, “000660”, 10, 0, “00”, “2”);
        try:
            if self.account_num != None:
                code = stock_code[1:]
                print("[매수] stock_buy() - 종목: " + codename + ", 코드: " + code)
                # data = self.kiwoom.SendOrder('매수테스트', "1000", self.account_num, quantity, code, 1, 0, '03', "")
                data = self.kiwoom.SendOrder('매수테스트', "1000", "8033360511", quantity, code, 1, 0, '03', "")
                print(data)
        except:
            self.error_popup("매수 거래", "매수 거래에 실패 했습니다.")

    def getCurPcTime(self):
        curtime = time.localtime()
        if (curtime.tm_hour < 10):
            hour = '0' + str(curtime.tm_hour)
        else:
            hour = str(curtime.tm_hour)
        if (curtime.tm_min < 10):
            min = '0' + str(curtime.tm_min)
        else:
            min = str(curtime.tm_min)
        if curtime.tm_sec < 10:
            sec = '0' + str(curtime.tm_sec)
        else:
            sec = str(curtime.tm_sec)
        pctime = hour + ':' + min + ':' + sec
        return pctime

    def setColortoRow(self, row_index, color):
        for j in range(self.tableWidget.columnCount()):
            self.tableWidget.item(row_index, j).setBackground(color)

    def insertDataToTable(self, item, word_found):
        # currentRowCount = self.tableWidget.rowCount()
        # print("[insertDataToTable] currentRowCount:", currentRowCount)
        insert_pos = 0
        self.tableWidget.insertRow(insert_pos)
        newstime = item.pop('시간')
        pctime = self.getCurPcTime()
        code = item.pop('코드')
        codename = item.pop('종목명')
        contents = item.pop('내용')
        mtype = item.pop('구분')
        others = '-'
        # ['뉴스시간', '종목코드', '종목명', '내용', '구분', '기타']
        self.tableWidget.setItem(insert_pos, 0, QTableWidgetItem(newstime))
        #self.tableWidget.setItem(insert_pos, 1, QTableWidgetItem(pctime))
        self.tableWidget.setItem(insert_pos, 1, QTableWidgetItem(code))
        self.tableWidget.setItem(insert_pos, 2, QTableWidgetItem(codename))
        self.tableWidget.setItem(insert_pos, 3, QTableWidgetItem(contents))
        self.tableWidget.setItem(insert_pos, 4, QTableWidgetItem(mtype))
        self.tableWidget.setItem(insert_pos, 5, QTableWidgetItem(others))

        if word_found:
            self.setColortoRow(insert_pos, QtGui.QColor(50, 50, 200, 100))
            self.stock_buy(codename, code, 1)
        else:
            self.setColortoRow(insert_pos, QtGui.QBrush(QtGui.QColor(255, 255, 255, 255)))
        # self.tableWidget.setStyleSheet('color:rgb(%s,%s,%s)'%(255,100,100))
        # colorItem = self.tableWidget.itemAt
        # colorItem.setBackground(QtGui.QColor(100, 100, 150))
        # self.tableWidget.setItem(0,0,colorItem)

        return

    def btnPrint_clicked(self):
        # for item in self.listWatchData:
        #     print(item)
        return

    def btnKiwoomLogin_clicked(self):
        ret = self.kiwoom.dynamicCall("CommConnect()")
        return

    def btnKiwoomCheck_clicked(self):
        try:
            if self.kiwoom.dynamicCall("GetConnectState()") == 0:
                self.statusBar().showMessage("Not connected")
            else:
                self.statusBar().showMessage("Connected")
        except:
            self.error_popup("키움증권", "키움증권 API 모듈에 문제가 있습니다.")
        return

    def btnExcel_clicked(self):
        # if (len(self.listWatchData) == 0):
        #     print('데이터 없음')
        #     return
        #
        # df = pd.DataFrame(columns=['시간', '코드', '종목명', '내용'])
        #
        # for item in self.listWatchData:
        #     df.loc[len(df)] = item
        #
        # writer = pd.ExcelWriter(gExcelFile, engine='xlsxwriter')
        # # Convert the dataframe to an XlsxWriter Excel object.
        # df.to_excel(writer, sheet_name='Sheet1')
        # # Close the Pandas Excel writer and output the Excel file.
        # writer.save()
        # os.startfile(gExcelFile)
        return

    def btnExit_clicked(self):
        # exit()
        OptionWindow(self)
        return

    def error_popup(self, title, msg):
        ctypes.windll.user32.MessageBoxW(0, msg, title, 0)


if __name__ == "__main__":
    app = QApplication(sys.argv)
    mainWindow = MainWindow()
    mainWindow.show()
    app.exec_()


